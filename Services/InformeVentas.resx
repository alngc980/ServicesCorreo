<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        MLkIWrpcZEIICeTybO1AvXJJbhERERERERERERERERERERERERERERERERERERERERERERERERERERER
        ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERkP/j89Z7m6PCHhMQAAAABJ
        RU5ErkJggg==
</value>
  </data>
</root>